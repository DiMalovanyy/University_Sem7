syntax = "proto3";

option go_package = "github.com/DiMalovanyy/University_Sem7/IT/DB/model/proto"; 

import "database.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


service DatabaseService {
    rpc GetDatabaseList(google.protobuf.Empty) returns (GetDatabaseListResponse) {
        option (google.api.http) = {
            get: "/v1/api/database"
        };
    }
    rpc GetDatabase(GetDatabaseRequest) returns (Database) {
        option (google.api.http) = {
            get: "/v1/api/database/{databaseName}"
        };
    }
    rpc LoadDatabase(LoadDatabaseRequest) returns (Database) {
        option (google.api.http) = {
            get: "/v1/api/database/load/{directory}/{filaname}"
        };
    }
    rpc SaveDatabase(SaveDatabaseRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/api/database/save/{directory}/{databaseName}"
        };
    }

    rpc GetTable(GetTableRequest) returns (Table) {
        option (google.api.http) = {
            get: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}"
            
        };
    }
    rpc DeleteTable(DeleteTableRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}"
        };
    }
    rpc AppendRow(AppendRowRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}/row"
        };
    }
    rpc AppendColumn(AppendColumnRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}/column"
        };
    }
    rpc DeleteRow(DeleteRowRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}/row/{id}"
        };
    }
    rpc DeleteColumn(DeleteColumnRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}/column/{id}"
        };
    }


    rpc ChangeData(ChangeDataRequest) returns  (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/api/database/{tableIdentifier.databaseName}/table/{tableIdentifier.tableName}"
            body: "tableData"
        };
    }

    rpc TableDiff(TableDiffRequest) returns (Table) {
        option (google.api.http) = {
            put: "/v1/api/diff"
            body: "*"
        };
    }
}

message GetDatabaseListResponse {
    repeated string databaseNames = 1;
}

message GetDatabaseRequest {
    string databaseName = 1;
    bool createIfNotExist = 2;
}

message LoadDatabaseRequest {
    string directory = 1;
    string filaname = 2;
} 

message SaveDatabaseRequest {
    string directory = 1;
    string databaseName = 2;
}

message TableIdentifier {
    string databaseName = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "databaseName"}}];
    string tableName = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "tableName"}}];
}

message GetTableRequest {
    TableIdentifier tableIdentifier = 1;
    bool createIfNotExist = 2;
}

message DeleteTableRequest {
    TableIdentifier tableIdentifier = 1;
}

message AppendRowRequest {
    TableIdentifier tableIdentifier = 1;
}

message AppendColumnRequest {
    TableIdentifier tableIdentifier = 1;
}

message TableData {
    Data newData = 1;
    int64 rowIndex = 2;
    int64 columnIndex = 3;
}

message ChangeDataRequest {
    TableIdentifier tableIdentifier = 1;
    TableData tableData = 2;
}

message DeleteRowRequest {
    TableIdentifier tableIdentifier = 1;
    int64 id = 2;
}

message DeleteColumnRequest {
    TableIdentifier tableIdentifier = 1;
    int64 id = 2;
}

message TableDiffRequest {
    TableIdentifier firstTable = 1;
    TableIdentifier secondTable = 2;
}
